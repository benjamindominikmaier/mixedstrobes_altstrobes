geom_point(aes(col = protocol))+
geom_line()+
stat_summary(geom = "line", col = "#E76BF3")+
scale_color_manual(values = c("#E76BF3"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
labs(x = "Strobe Length",
y = "Matches [%]")
ggplot(results_sim_alt, aes(x = strobe_lengths, y = matches, group=1))+
geom_point(aes(col = protocol))+
geom_line()+
stat_summary(geom = "line", col = "#E76BF3")+
scale_color_manual(values = c("#E76BF3", "#F8766D"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
labs(x = "Strobe Length",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
ggplot(results_sim_alt, aes(x = strobe_lengths, y = matches, group=1))+
geom_point(aes(col = protocol))+
geom_line()+
stat_summary(geom = "line", col = "#E76BF3")+
scale_color_manual(values = c("#E76BF3", "#00B0F6"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
labs(x = "Strobe Length",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
altstrobes_raw_data <- read.table(file = "../output/data tables/altstrobes", sep = "&", header = F)
altstrobes_raw_data
results_sim_alt <- altstrobes_raw_data %>% group_by(V1, V2, V7) %>% summarise(m = round(mean(V3),2), sc = round(mean(V4),2), mc = round(mean(V5),2), esize = round(mean(V6),2))
results_sim_alt
colnames(results_sim_alt) <- c("protocol", "strobe_lengths", "mutation_rate", "matches", "sequence_coverage", "match_coverage", "gaps")
results_sim_alt$strobe_lengths <- factor(results_sim_alt$strobe_lengths, levels = c(" (1/29) ", " (2/28) ", " (3/27) ", " (4/26) ", " (5/25) ", " (6/24) ", " (7/23) ", " (8/22) ", " (9/21) ", " (10/20) ", " (11/19) ", " (12/18) ", " (13/17) ", " (14/16) ", " (15/15) "))
results_sim_alt <- results_sim_alt %>% mutate(protocol = ifelse(strobe_lengths == " (15/15) ", "randstrobes", protocol))
p <- ggplot(results_sim_alt, aes(x = strobe_lengths, y = matches, group=1))+
geom_point(aes(col = protocol))+
geom_line()+
stat_summary(geom = "line", col = "#E76BF3")+
scale_color_manual(values = c("#E76BF3", "#00B0F6"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
labs(x = "Strobe Length",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
ggsave("../output/figs/matching_analysis_sim/suppl_matches_altstrobes.png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/suppl_matches_altstrobes.pdf", height = 3, width = 7)
p <- ggplot(results_sim_alt, aes(x = strobe_lengths, y = sequence_coverage, group=1))+
geom_point(aes(col = protocol))+
geom_line()+
stat_summary(geom = "line", col = "#E76BF3")+
scale_color_manual(values = c("#E76BF3", "#00B0F6"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
labs(x = "Strobe Length",
y = "Sequence Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
ggsave("../output/figs/matching_analysis_sim/suppl_sequence_coverage_altstrobes.png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/suppl_sequence_coverage_altstrobes.pdf", height = 3, width = 7)
p <- ggplot(results_sim_alt, aes(x = strobe_lengths, y = match_coverage, group=1))+
geom_point(aes(col = protocol))+
geom_line()+
stat_summary(geom = "line", col = "#E76BF3")+
scale_color_manual(values = c("#E76BF3", "#00B0F6"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
labs(x = "Strobe Length",
y = "Match Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
ggsave("../output/figs/matching_analysis_sim/suppl_match_coverage_altstrobes.png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/suppl_match_coverage_altstrobes.pdf", height = 3, width = 7)
p <- ggplot(results_sim_alt, aes(x = strobe_lengths, y = gaps, group=1))+
geom_point(aes(col = protocol))+
geom_line()+
stat_summary(geom = "line", col = "#E76BF3")+
scale_color_manual(values = c("#E76BF3", "#00B0F6"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
labs(x = "Strobe Length",
y = "Expected Island Size [bp]")+
facet_wrap(~mutation_rate, scales = "free")
ggsave("../output/figs/matching_analysis_sim/suppl_expected_island_size_altstrobes.png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/suppl_expected_island_size_altstrobes.pdf", height = 3, width = 7)
results_sim <- read.table(file = "../output/data tables/matching_analysis_simulated (2,15,25,50)", sep = "&", header = F)
colnames(results_sim) <- c("protocol", "order", "setting", "strobe_fraction", "matches", "sequence_coverage", "match_coverage", "gaps", "mutation_rate")
results_sim <- results_sim %>% mutate(protocol = gsub("mixed", "", protocol))
results_sim <- results_sim %>% group_by(protocol, order, strobe_fraction, mutation_rate) %>%
summarise(matches = mean(matches), sequence_coverage = mean(sequence_coverage), match_coverage = mean(match_coverage), gaps = mean(gaps))
results_sim$protocol <- factor(results_sim$protocol, levels = c("kmers", "minstrobes", "hybridstrobes", "randstrobes", "altstrobes", "spaced_kmers_dense", "spaced_kmers_sparse"))
results_sim <- results_sim %>% filter(protocol != "altstrobes" | strobe_fraction != 0.5)
results_sim
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")))+
geom_point(aes(x = 100*strobe_fraction, y = matches, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = matches, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Matches [%]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_matches_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_matches_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) )+
geom_point(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Sequence Coverage [%]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_sequence_coverage_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_sequence_coverage_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) )+
geom_point(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Match Coverage [%]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_match_coverage_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_match_coverage_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) )+
geom_point(aes(x = 100*strobe_fraction, y = gaps, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = gaps, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Expected Island Size [bp]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_expected_island_size_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_expected_island_size_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = matches, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = matches, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,25,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,25,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Sequence Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_sequence_coverage_order2_(2,15,25,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_sequence_coverage_order2_(2,15,25,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Match Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_match_coverage_order2_(2,15,25,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_match_coverage_order2_(2,15,25,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = gaps, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = gaps, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Expected Island Size [bp]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_expected_island_size_order2_(2,15,25,50).pdf", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_expected_island_size_order2_(2,15,25,50).png", height = 3, width = 7)
results_sim <- read.table(file = "../output/data tables/matching_analysis_simulated_(2,15,16,50)", sep = "&", header = F)
colnames(results_sim) <- c("protocol", "order", "setting", "strobe_fraction", "matches", "sequence_coverage", "match_coverage", "gaps", "mutation_rate")
results_sim <- results_sim %>% mutate(protocol = gsub("mixed", "", protocol))
results_sim$protocol <- factor(results_sim$protocol, levels = c("kmers", "minstrobes", "hybridstrobes", "randstrobes", "altstrobes", "spaced_kmers_dense", "spaced_kmers_sparse"))
results_sim <- results_sim %>% filter(protocol != "altstrobes" | strobe_fraction != 0.5)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = matches, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = matches, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/[Supp] Matches (2,15,16,50).png", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Sequence Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/[Supp] Sequence Coverage (2,15,16,50).png", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Match Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/[Supp] Match Coverage (2,15,16,50).png", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = gaps, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = gaps, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Expected Island Size [bp]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/[Supp] Expected Island Size (2,15,16,50).png", height = 3, width = 7)
results_minimap <- read.table("../output/data tables/minimap_results", header=T, sep="&", dec = ".", check.names = FALSE)
results_minimap_melted <- reshape2::melt(results_minimap %>% unite("seeding", "seeding":"settings", remove = TRUE, sep = " "), id=c("seeding", "mut_freq"))
ggplot(results_minimap_melted)+
geom_point(aes(x=seeding, y=value, col=seeding), size = 2)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")+
#scale_fill_manual(values = c("#E76BF3", "#F8766D", "#F8766D", "blue", "#00B0F6"))+
scale_color_manual(values = c("#E76BF3", "#F8766D", "#F8766D", "blue", "#00B0F6"))+
facet_grid(variable ~ mut_freq, scales = "free")
ggsave("../output/figs/benchmarking_minimap/suppl_minimap.pdf", width = 7, height = 18)
unique(results_minimap_melted$variable)
variable_plotted = c("total time [s]", "indexing time [s]", "aligning time [s]", "peak RSS [Gb]", "mapped correctly [%]")
ggplot(results_minimap_melted %>% filter(variable %in% variable_plotted))+
geom_point(aes(x=seeding, y=value, col=seeding), size = 2)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")+
#scale_fill_manual(values = c("#E76BF3", "#F8766D", "#F8766D", "blue", "#00B0F6"))+
scale_color_manual(values = c("#E76BF3", "#F8766D", "#F8766D", "blue", "#00B0F6"))+
facet_grid(variable ~ mut_freq, scales = "free")
ggsave("../output/figs/benchmarking_minimap/suppl_minimap_1.pdf", width = 5.5, height = 9)
ggplot(results_minimap_melted %>% filter(!variable %in% variable_plotted))+
geom_point(aes(x=seeding, y=value, col=seeding), size = 2)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")+
#scale_fill_manual(values = c("#E76BF3", "#F8766D", "#F8766D", "blue", "#00B0F6"))+
scale_color_manual(values = c("#E76BF3", "#F8766D", "#F8766D", "blue", "#00B0F6"))+
facet_grid(variable ~ mut_freq, scales = "free")
ggsave("../output/figs/benchmarking_minimap/suppl_minimap_2.pdf", width = 5.5, height = 9)
results_benchmarking_strobemap <- read.table("../output/data tables/benchmark_strobemap_indexing", header=T, sep="&", dec = ".", check.names = FALSE)
plotted_variables <- c("Total indexing time [s]", "Total time generating mers [s]", "Total size of hash table index [Mb]")
results_benchmarking_strobemap$seeding <- factor(results_benchmarking_strobemap$seeding, levels = c("k-mers", "randstrobes", "mixedstrobes", "altstrobes"))
results_benchmarking_strobemap_melted <- reshape2::melt(results_benchmarking_strobemap, id = c("setting", "genome", "seeding"))
results_benchmarking_strobemap_melted$variable <- factor(results_benchmarking_strobemap_melted$variable,
levels=c(
"Total indexing time [s]",
"Total time generating mers [s]",
"Total time generating flat index vector [s]",
"Total time generating hash table [s]",
"Maximum resident set size [Mb]",
"Total size of flat mers-vector [Mb]",
"Total size of hash table index [Mb]"
))
results_benchmarking_strobemap_melted <- results_benchmarking_strobemap_melted %>% filter(variable %in% plotted_variables)
ggplot(results_benchmarking_strobemap_melted %>% filter(genome == "Human Chr.21"))+
geom_col(aes(x = seeding, y = value/10, fill=seeding))+
scale_fill_manual(values = c("#F8766D", "#00B0F6", "blue", "#E76BF3"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")+
facet_grid(variable~genome, labeller = label_wrap_gen(width=14), scales="free_y")
ggsave("../output/figs/benchmarking_strobemap/suppl_benchmarking_strobemap_human.pdf", width = 3.55, height = 4)
ggsave("../output/figs/benchmarking_strobemap/suppl_benchmarking_strobemap_human.png", width = 3.55, height = 4)
ggplot(results_benchmarking_strobemap_melted %>% filter(genome == "E.coli"))+
geom_col(aes(x = seeding, y = value/10, fill=seeding))+
scale_fill_manual(values = c("#F8766D", "#00B0F6", "blue", "#E76BF3"))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position = "none")+
facet_grid(variable~genome, labeller = label_wrap_gen(width=14), scales="free_y")
ggsave("../output/figs/benchmarking_strobemap/suppl_benchmarking_strobemap_ecoli.pdf", width = 3.5, height = 4)
ggsave("../output/figs/benchmarking_strobemap/suppl_benchmarking_strobemap_ecoli.png", width = 3.5, height = 4)
results_sim <- read.table(file = "../output/data tables/matching_analysis_simulated_(2,15,16,50)", sep = "&", header = F)
colnames(results_sim) <- c("protocol", "order", "setting", "strobe_fraction", "matches", "sequence_coverage", "match_coverage", "gaps", "mutation_rate")
results_sim <- results_sim %>% mutate(protocol = gsub("mixed", "", protocol))
results_sim$protocol <- factor(results_sim$protocol, levels = c("kmers", "minstrobes", "hybridstrobes", "randstrobes", "altstrobes", "spaced_kmers_dense", "spaced_kmers_sparse"))
results_sim <- results_sim %>% filter(protocol != "altstrobes" | strobe_fraction != 0.5)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = matches, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = matches, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,25,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,25,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Sequence Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_sequence_coverage_order2_(2,15,16,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_sequence_coverage_order2_(2,15,16,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Match Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_match_coverage_order2_(2,15,16,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_match_coverage_order2_(2,15,16,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = gaps, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = gaps, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Expected Island Size [bp]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_expected_island_size_order2_(2,15,16,50).pdf", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_expected_island_size_order2_(2,15,16,50).png", height = 3, width = 7)
results_sim <- read.table(file = "../output/data tables/matching_analysis_simulated_(2,15,16,50)", sep = "&", header = F)
colnames(results_sim) <- c("protocol", "order", "setting", "strobe_fraction", "matches", "sequence_coverage", "match_coverage", "gaps", "mutation_rate")
results_sim <- results_sim %>% mutate(protocol = gsub("mixed", "", protocol))
results_sim$protocol <- factor(results_sim$protocol, levels = c("kmers", "minstrobes", "hybridstrobes", "randstrobes", "altstrobes", "spaced_kmers_dense", "spaced_kmers_sparse"))
results_sim <- results_sim %>% filter(protocol != "altstrobes" | strobe_fraction != 0.5)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = matches, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = matches, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,16,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,16,50).pdf", height = 3, width = 7)
results_sim <- read.table(file = "../output/data tables/matching_analysis_simulated (2,15,25,50)", sep = "&", header = F)
colnames(results_sim) <- c("protocol", "order", "setting", "strobe_fraction", "matches", "sequence_coverage", "match_coverage", "gaps", "mutation_rate")
results_sim <- results_sim %>% mutate(protocol = gsub("mixed", "", protocol))
results_sim <- results_sim %>% group_by(protocol, order, strobe_fraction, mutation_rate) %>%
summarise(matches = mean(matches), sequence_coverage = mean(sequence_coverage), match_coverage = mean(match_coverage), gaps = mean(gaps))
results_sim$protocol <- factor(results_sim$protocol, levels = c("kmers", "minstrobes", "hybridstrobes", "randstrobes", "altstrobes", "spaced_kmers_dense", "spaced_kmers_sparse"))
results_sim <- results_sim %>% filter(protocol != "altstrobes" | strobe_fraction != 0.5)
results_sim
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")))+
geom_point(aes(x = 100*strobe_fraction, y = matches, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = matches, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Matches [%]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_matches_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_matches_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) )+
geom_point(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Sequence Coverage [%]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_sequence_coverage_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_sequence_coverage_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) )+
geom_point(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Match Coverage [%]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_match_coverage_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_match_coverage_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) )+
geom_point(aes(x = 100*strobe_fraction, y = gaps, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = gaps, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Expected Island Size [bp]")+
facet_grid(mutation_rate~order, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Order", breaks = NULL, labels = NULL)) +
scale_y_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/supp_expected_island_size_sim_all_(2,15,25,50).png", height = 7, width = 8)
ggsave("../output/figs/matching_analysis_sim/supp_expected_island_size_sim_all_(2,15,25,50).pdf", height = 7, width = 8)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = matches, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = matches, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Matches [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,25,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_matches_order2_(2,15,25,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = sequence_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Sequence Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_sequence_coverage_order2_(2,15,25,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_sequence_coverage_order2_(2,15,25,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = match_coverage, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Match Coverage [%]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_match_coverage_order2_(2,15,25,50).png", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_match_coverage_order2_(2,15,25,50).pdf", height = 3, width = 7)
p <- ggplot(results_sim %>% filter(!protocol %in% c("spaced_kmers_dense", "spaced_kmers_sparse")) %>% filter(order == 2) )+
geom_point(aes(x = 100*strobe_fraction, y = gaps, col = protocol, shape = protocol))+
geom_line(aes(x = 100*strobe_fraction, y = gaps, col = protocol))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.position = "none")+
scale_shape_manual(values = c(16,22,23,24,25))+
labs(x = "Strobe Fraction [%]",
y = "Expected Island Size [bp]")+
facet_wrap(~mutation_rate, scales = "free")
p +
scale_x_continuous(sec.axis = sec_axis(~ . , name = "Mutation Rate", breaks = NULL, labels = NULL))
ggsave("../output/figs/matching_analysis_sim/additional_expected_island_size_order2_(2,15,25,50).pdf", height = 3, width = 7)
ggsave("../output/figs/matching_analysis_sim/additional_expected_island_size_order2_(2,15,25,50).png", height = 3, width = 7)
